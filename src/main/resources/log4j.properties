### 设置###
log4j.rootLogger = debug,stdout,D,E

### 输出信息到控制抬 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 输出DEBUG 级别以上的日志到=E://logs/error.log ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
log4j.appender.D.File = ../logs/ssmbase.log
log4j.appender.D.Append = true
log4j.appender.D.DatePattern = "."yyyy-MM-dd
log4j.appender.D.Threshold = DEBUG 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

### 输出ERROR 级别以上的日志到=E://logs/error.log ###
log4j.appender.E = org.apache.log4j.DailyRollingFileAppender
log4j.appender.E.File =../logs/ssmbaseError.log 
log4j.appender.E.Append = true
log4j.appender.E.Threshold = ERROR 
log4j.appender.E.DatePattern = "."yyyy-MM-dd
log4j.appender.E.layout = org.apache.log4j.PatternLayout
log4j.appender.E.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

#log4j.appender.File.layout.ConversionPattern =%5p %d{yyyy-MM-dd HH:mm:ss,SSS} %C: %m%n

log4j.logger.com.opensymphony=ERROR
log4j.logger.org.springframework=ERROR

log4j.logger.org.apache=INFO
log4j.logger.java.sql.Connection=INFO
log4j.logger.java.sql.PreparedStatement=INFO
log4j.logger.java.sql.ResultSet=INFO
log4j.logger.java.sql.Statement=INFO

#Appender 为日志输出目的地，Log4j提供的appender有以下几种：
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

#   %m   输出代码中指定的消息
#   %p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#　　%r   输出自应用启动到输出该log信息耗费的毫秒数
#　　%c   输出所属的类目，通常就是所在类的全名
#　　%t   输出产生该日志事件的线程名
#　　%n   输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
#　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )

#log4j配置文件中路径配置一般有三种方法：
#（1）绝对路径法：直接配置为系统绝对路径；
#（2）相对路径法：
#log4j.appender.logfile.File=../logs/app.log，将日志记录到tomcat下的logs文件夹；
#log4j.appender.logfile.File=logs/app.log，将日志记录到tomcat的bin目录下的logs文件夹；
#（3）使用环境变量相对路径法：程序会优先找jvm环境变量，然后再找系统环境变量，来查找配置文件中的变量。
#log4j.appender.logfile.File=${user.dir}/logs/app.log，使用tomcat容器时${user.dir}对应tomcat的bin目录；
#log4j.appender.logfile.File=${user.home}/logs/app.log，${user.home}对应操作系统当前用户目录；
#log4j.appender.logfile.File=${webApp.root}/logs/app.log，${webApp.root}对应当前应用根目录；
